#!/data/data/com.termux/files/usr/bin/bash

# Dependencies - webtorrent, binutils, git, nodejs

clear

mkdir -p "$HOME"/.cache/notflix

baseurl="https://1337x.to"
cachedir="$HOME/.cache/notflix"

if [ -z "$1" ]; then
  echo "Search for Shows:  "
  read -r query
else
  query=$1
fi

query=${query// /+}

curl -s $baseurl/search/"$query"/1/ > "$cachedir"/tmp.html

# Get Titles
grep -o '<a href="/torrent/.*</a>' "$cachedir"/tmp.html |
  sed 's/<[^>]*>//g' > "$cachedir"/titles.bw

result_count=$(wc -l "$cachedir"/titles.bw | awk '{print $1}')
if [ "$result_count" -lt 1 ]; then
  echo "No Result found. Try again"
  exit 0
fi

# Seeders and Leechers
grep -o '<td class="coll-2 seeds.*</td>\|<td class="coll-3 leeches.*</td>' "$cachedir"/tmp.html |
  sed 's/<[^>]*>//g' | sed 'N;s/\n/ /' > "$cachedir"/seedleech.bw

# Size
grep -o '<td class="coll-4 size.*</td>' "$cachedir"/tmp.html |
  sed 's/<span class="seeds">.*<\/span>//g' |
  sed -e 's/<[^>]*>//g' > "$cachedir"/size.bw

# Links
grep -E '/torrent/' "$cachedir"/tmp.html |
  sed -E 's#.*(/torrent/.*)/">.*/#\1#' |
  sed 's/td>//g' > "$cachedir"/links.bw

# Clearning up some data to display
sed 's/\./ /g; s/\-/ /g' "$cachedir"/titles.bw |
  sed 's/[^A-Za-z0-9 ]//g' | tr -s " " > "$cachedir"/tmp && mv "$cachedir"/tmp "$cachedir"/titles.bw

awk '{print NR " - ["$0"]"}' "$cachedir"/size.bw > "$cachedir"/tmp && mv "$cachedir"/tmp "$cachedir"/size.bw
awk '{print "[S:"$1 ", L:"$2"]" }' "$cachedir"/seedleech.bw > "$cachedir"/tmp && mv "$cachedir"/tmp "$cachedir"/seedleech.bw

# Getting the line number
LINE="$(paste -d\  "$cachedir"/size.bw "$cachedir"/titles.bw "$cachedir"/seedleech.bw)"
#echo "Select your stream"
#read LINE

IFS=$'\n' lines=($LINE)

# Renders a text based list of options that can be selected by the
# user using up, down and enter keys and returns the chosen option.
#
#   Arguments   : list of options, maximum of 256
#                 "opt1" "opt2" ...
#   Return value: selected index (0 for opt1, 1 for opt2 ...)
function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[7l"; }
    cursor_blink_off() { printf "$ESC[7h"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "$1"; }
    print_selected()   { printf "$ESC[7m$1$ESC[27m"; }
    get_cursor_row()   { IFS=';' read -r -sdR -p $'\E[6n' ROW COL; echo "${ROW#*[}"; }
    key_input()        { read -r -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ "$selected" -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to "$lastrow"
    printf "\n"
    cursor_blink_on

    return $selected
}

echo "Select one option using up/down keys and enter to confirm:"
echo

options=("${lines[@]}")

select_option "${options[@]}"
LINE=$?

if [ -z "$LINE" ]; then
  echo "No Result selected. Exiting..."
  exit 0
fi

clear

echo "Searching Magnet seeds"
url=$(head -n $LINE "$cachedir"/links.bw | tail -n +$LINE)
fullURL="${baseurl}${url}/"

# Requesting page for magnet link
curl -s "$fullURL" > "$cachedir"/tmp.html
magnet=$(grep -Eo "magnet:\?xt=urn:btih:[a-zA-Z0-9]*" "$cachedir"/tmp.html | head -n 1)

mvp () {
rm -r $TMPDIR/webtorrent/*
}

webtorrent "$magnet" --mpv --no-quit
mvp
